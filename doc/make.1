.TH REMAKE 1 "5 August 2020" "GNU" "User Commands"
.SH NAME
remake \- GNU make utility to maintain groups of programs
.SH SYNOPSIS
.B remake
[\fIOPTION\fR]... [\fITARGET\fR]...
.SH DESCRIPTION
.LP
The
.I remake
utility will determine automatically which pieces of a large program need to
be recompiled, and issue the commands to recompile them.  The manual describes
the GNU implementation of
.BR make from which remake is derived ,
which was written by Richard Stallman and Roland McGrath, and is
currently maintained by Paul Smith.  Extended error reporting,
debugger, and profiling extensions were written by Rocky Bernstein.
Our examples show C programs, since they are very common, but you can
use
.B remake
with any programming language whose compiler can be run with a shell command.
In fact,
.B remake
or
.B remake
is not limited to programs.  You can use it to describe any task where some
files must be updated automatically from others whenever the others change.
.LP
To prepare to use
.BR remake ,
you must write a file called the
.I makefile
that describes the relationships among files in your program, and the states
the commands for updating each file.  In a program, typically the executable
file is updated from object files, which are in turn made by compiling source
files.
.LP
Once a suitable makefile exists, each time you change some source files,
this simple shell command:
.sp 1
.RS
.B remake
.RE
.sp 1
suffices to perform all necessary recompilations.
The
.B remake
program uses the makefile description and the last-modification times of the
files to decide which of the files need to be updated.  For each of those
files, it issues the commands recorded in the makefile.
.LP
.B remake
executes commands in the
.I makefile
to update one or more target
.IR names ,
where
.I name
is typically a program.
If no
.B \-f
option is present,
.B remake
will look for the makefiles
.IR GNUmakefile ,
.IR makefile ,
and
.IR Makefile ,
in that order.
.LP
Normally you should call your makefile either
.I makefile
or
.IR Makefile .
(We recommend
.I Makefile
because it appears prominently near the beginning of a directory
listing, right near other important files such as
.IR  README .)
The first name checked,
.IR GNUmakefile ,
is not recommended for most makefiles.  You should use this name if you have a
makefile that is specific to GNU
.BR remake,
and will not be understood by other versions of
.BR remake .
If
.I makefile
is '\-', the standard input is read.
.LP
.B remake
updates a target if it depends on prerequisite files
that have been modified since the target was last modified,
or if the target does not exist.
.SH OPTIONS
.LP Below we give options that are specific to
.BR remake .
For the other options, please refer to the GNU Make documentation

.sp 1
.TP 0.5i
\fB\-!\fR, \fB\-\-post\-mortem\fR
Go into the debugger on an error. This is the
Same as options: \-\-debugger \-\-debugger\-stop=error

.TP 0.5i
\fB\-P\fR, \fB\-\-profile\fR
Creates callgrind profile output.
Callgrind output can be used with kcachegrind, callgrind_annotate,
or gprof2dot to analyze data. You can get not only timings, but
a graph of the target dependencies checked

.TP 0.5i
.BR "\-\-targets"
Print a list of explicitly-named targets found in read-in makefiles.

.TP 0.5i
.BR \-\-tasks
Print a list of explicitly-named targets found in read-in makefiles which
have commands associated with them and are either phony or are not implicit.

.TP 0.5i
.B \-x, " \-\-trace"
Print trace information. Commands in rules which are normally
silent are shown, same as if \fB\-\-just\-print\fR were given.

.TP 0.5i
.BI \-\-trace "[=FLAGS]"
Set trace flags
If the
.I FLAGS
are omitted, then the behavior is the same as if
.B \-d
was specified.
.I FLAGS
may be
.I read
for tracing Makefiles read in,
.I noshell
which is like \fInormal\fR but shell tracing
is disabled, or
.I full
for maximum tracing.

.TP 0.5i
.B \-X, " \-\-debugger"
Enter debugger
.TP 0.5i
.BI \-\-debugger "[=TYPE]"
Enter debugger with
If the
.I TYPE
are omitted, then the behavior is the same as if
.B \-X
was specified.
.I TYPE
may be
.I goal
for all tracing Makefiles read
.BR \-d ),
.I preread
which is the same as given no option
.I preaction
which is like \fInormal\fR but shell tracing
is disabled
.I full
for maximum tracing.
.I fatal
for entering the debugger on a fatal error,
.I error
for entering the debugger on an error

.SH "SEE ALSO"
The full documentation for
.B remake
is maintained as a Texinfo manual.  If the
.B info
and
.B remake
programs are properly installed at your site, the command
.IP
.B info remake
.PP
should give you access to the complete manual.
.SH BUGS
Since this is derived from GNU Make, it most of its bugs.

.LP
See the chapter ``Problems and Bugs'' in
.IR "The GNU Make Manual" .

.LP
For
.B remake
-specifc bugs see
.IR https://github.com/rocky/remake/issues/ .
.SH AUTHORS
The
.IR "GNU make"
from which
.IR remake
is derived, was written by Richard Stallman and Roland McGrath, and is currently
maintained by Paul Smith.

However
.IR remake
is the brainstorm of Rocky Bernstein. The help of others though has been, and is, greatly appreciated.
Michael Lord Welles however thought of the name,
.IR remake .
.SH "COPYRIGHT"
Copyright \(co 1992-1993, 1996-2020 Free Software Foundation, Inc.
This file is part of
.IR "GNU make" .
.LP
GNU Make is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.
.LP
GNU Make is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
.LP
You should have received a copy of the GNU General Public License along with
this program.  If not, see
.IR http://www.gnu.org/licenses/ .
